/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rpgsystem;

import java.util.LinkedList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Faleon
 */
public class CombatGUI extends javax.swing.JFrame {

    /**
     * Creates new form CombatMenuGUI
     */
    public CombatGUI() {
        initComponents();

        nameLabel.setText(RPGSystem.getActiveCharacter().getName());

        levelLabel.setText(Integer.toString(
                RPGSystem.getActiveCharacter().getLevel()));

        healthLabel.setText(Integer.toString(RPGSystem.getActiveCharacter().getHealthPoints())
                + "/" + Integer.toString(RPGSystem.getActiveCharacter().getMaxHp()));

        healthBar.setValue(100 * RPGSystem.getActiveCharacter().getHealthPoints()
                / RPGSystem.getActiveCharacter().getMaxHp());

        magicLabel.setText(Integer.toString(RPGSystem.getActiveCharacter().getMagicPoints())
                + "/" + Integer.toString(RPGSystem.getActiveCharacter().getMaxMp()));

        magicBar.setValue((100 * RPGSystem.getActiveCharacter().getMagicPoints())
                / (RPGSystem.getActiveCharacter().getMaxMp()));

        monsterNameLabel.setText(RPGSystem.getActiveMonster().getName());

        monsterHPLabel.setText(Integer.toString(RPGSystem.getActiveMonster().getHealthPoints())
                + "/" + Integer.toString(RPGSystem.getActiveMonster().getMaxHp()));

        monsterBar.setValue(100 * (RPGSystem.getActiveMonster().getHealthPoints()
                / RPGSystem.getActiveMonster().getMaxHp()));

        LinkedList<Attack> attacks = RPGSystem.getActiveCharacter().getUsableAttacks();
        DefaultListModel attackModel = new DefaultListModel();
        for (Attack attack : attacks) {
            attackModel.addElement(attack.getAttackName());
        }
        attackList.setModel(attackModel);

        LinkedList<Item> items = RPGSystem.getActiveCharacter().getUsableItems();
        DefaultListModel itemModel = (DefaultListModel) (itemList.getModel());
        for (Item item : items) {
            itemModel.addElement(item.getName());
        }

        combatTextArea.append("You ready yourself for battle.\n"
                + "What will you do?\n");
        RPGSystem.updateWorldLog("You ready yourself for battle.\n"
                + "What will you do?\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        attackList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemList = new javax.swing.JList<>();
        actionButton = new javax.swing.JButton();
        itemButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        combatTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        magicBar = new javax.swing.JProgressBar();
        healthLabel = new javax.swing.JLabel();
        magicLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        levelLabel = new javax.swing.JLabel();
        healthBar = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        monsterBar = new javax.swing.JProgressBar();
        monsterNameLabel = new javax.swing.JLabel();
        monsterHPLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Combat Menu");
        setName("CombatMenu"); // NOI18N
        setResizable(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Actions");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Potions");

        attackList.setModel(new DefaultListModel());
        attackList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(attackList);

        itemList.setModel(new DefaultListModel());
        itemList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(itemList);

        actionButton.setText("Use Selected Action");
        actionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionButtonActionPerformed(evt);
            }
        });

        itemButton.setText("Use Item");
        itemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("World Log");

        combatTextArea.setEditable(false);
        combatTextArea.setColumns(20);
        combatTextArea.setLineWrap(true);
        combatTextArea.setRows(5);
        combatTextArea.setWrapStyleWord(true);
        jScrollPane3.setViewportView(combatTextArea);

        magicBar.setForeground(new java.awt.Color(0, 255, 255));

        healthLabel.setText("0000000");

        magicLabel.setText("0000000");

        nameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nameLabel.setText("Character Name");
        nameLabel.setToolTipText("");

        jLabel5.setText("MP");

        jLabel3.setText("HP");

        jLabel1.setText("Lvl");

        levelLabel.setText("000");

        healthBar.setForeground(new java.awt.Color(0, 255, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(233, 233, 233))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(levelLabel))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(healthLabel)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(magicLabel))
                            .addComponent(magicBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(healthBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(levelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(healthLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(healthBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(magicLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(magicBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        monsterBar.setForeground(new java.awt.Color(0, 255, 0));

        monsterNameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterNameLabel.setText("Monster Name");

        monsterHPLabel.setText("0000000");

        jLabel11.setText("HP");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(monsterNameLabel)
                    .addComponent(monsterBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monsterHPLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(monsterNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(monsterHPLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monsterBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(actionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(itemButton, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(actionButton)
                            .addComponent(itemButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void actionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionButtonActionPerformed
        // TODO add your handling code here:
        int healthBefore = RPGSystem.getActiveMonster().getHealthPoints();
        if (attackList.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Select an Action first.");
        } else {
            int selectedIndex = attackList.getSelectedIndex();
            //perform attack
            Attack attack = RPGSystem.getActiveCharacter().getUsableAttacks().get(selectedIndex);
            if (attack instanceof Magical) {
                if (((Magical) attack).getMagicPointCost() <= RPGSystem.getActiveCharacter().getMagicPoints()) {
                    RPGSystem.performAction(
                            attack,
                            RPGSystem.getActiveMonster());
                } else {
                    JOptionPane.showMessageDialog(null, "This spell requires "
                            + ((Magical) attack).getMagicPointCost() + " magic points.");
                    return;
                }

            } else {
                RPGSystem.performAction(
                        attack,
                        RPGSystem.getActiveMonster());
            }

            //update magic stats
            magicLabel.setText(Integer.toString(RPGSystem.getActiveCharacter().getMagicPoints())
                    + "/" + Integer.toString(RPGSystem.getActiveCharacter().getMaxMp()));

            magicBar.setValue((100 * RPGSystem.getActiveCharacter().getMagicPoints())
                    / (RPGSystem.getActiveCharacter().getMaxMp()));

            //update moneter's status
            monsterHPLabel.setText(Integer.toString(
                    RPGSystem.getActiveMonster().getHealthPoints())
                    + "/"
                    + Integer.toString(
                            RPGSystem.getActiveMonster().getMaxHp()));

            monsterBar.setValue(100
                    * RPGSystem.getActiveMonster().getHealthPoints()
                    / RPGSystem.getActiveMonster().getMaxHp());

            //tell player what happened
            int healthAfter = RPGSystem.getActiveMonster().getHealthPoints();
            int dmgDealt = healthBefore - healthAfter;
            updateWorldTextArea("You dive into combat using "
                    + attackList.getSelectedValue()
                    + "!\n"
                    + RPGSystem.getActiveMonster().getName() + " takes "
                    + dmgDealt + " damage and roars in pain!\n");

            //monster's turn
            if (RPGSystem.getActiveMonster().getHealthPoints() > 0) {
                healthBefore = RPGSystem.getActiveCharacter().getHealthPoints();
                Character activeCharacter = RPGSystem.getActiveCharacter();
                Attack monstersAttack = RPGSystem.getActiveMonster().decideAttack();

                RPGSystem.performAction(monstersAttack, activeCharacter);

                //player loses
                if (RPGSystem.getActiveCharacter().getHealthPoints() < 1) {

                    //notify player how they died
                    JOptionPane.showMessageDialog(null,
                            RPGSystem.getActiveMonster().getName()
                            + " has slain you! :\"(");

                    //show game over menu
                    GameOverGUI gameOver = new GameOverGUI();
                    RPGSystem.addGUI(gameOver);
                    gameOver.setVisible(true);

                    //close dungeon menu
                    DungeonGUI dungeonMenu = (DungeonGUI) RPGSystem.getDungeonMenu();
                    RPGSystem.removeGUI(dungeonMenu);
                    dungeonMenu.dispose();
                    dungeonMenu = null;

                    //reset monster
                    RPGSystem.getActiveMonster().resetStatus();

                    //close combat menu
                    RPGSystem.removeGUI(this);
                    this.dispose();
                    return;
                }

                //player still alive, update text
                healthLabel.setText(Integer.toString(
                        RPGSystem.getActiveCharacter().getHealthPoints())
                        + "/"
                        + Integer.toString(
                                RPGSystem.getActiveCharacter().getMaxHp()));
                healthBar.setValue(100
                        * RPGSystem.getActiveCharacter().getHealthPoints()
                        / RPGSystem.getActiveCharacter().getMaxHp());

                //tell player what happened
                healthAfter = RPGSystem.getActiveCharacter().getHealthPoints();
                dmgDealt = healthBefore - healthAfter;

                updateWorldTextArea(RPGSystem.getActiveMonster().getName()
                        + " lurches back at you with "
                        + monstersAttack.getAttackName()
                        + "!\n"
                        + RPGSystem.getActiveCharacter().getName() + " takes "
                        + dmgDealt + " damage and winces from the pain!\n"
                        + RPGSystem.getActiveMonster().getName()
                        + " waits eagerly for your next move.\n");
            } else {
                //tell player whats happened
                RPGSystem.updateWorldLog(RPGSystem.getActiveMonster().getName()
                        + " has been slain by your hand!\n"
                        + "You examine the corpse and find...");

                //gain wealth
                RPGSystem.getActiveCharacter().setWallet(
                        RPGSystem.getActiveMonster().getWallet()
                        + RPGSystem.getActiveCharacter().getWallet());
                RPGSystem.updateWorldLog(
                        RPGSystem.getActiveCharacter().getName()
                        + " is now $"
                        + RPGSystem.getActiveMonster().getWallet()
                        + " richer!");

                //gain monster's items
                LinkedList<Item> monsterInventory = RPGSystem.getActiveMonster().getItems();
                for (Item monsterItem : monsterInventory) {
                    LinkedList<Item> characterInventory = RPGSystem.getActiveCharacter().getItems();
                    boolean exists = false;
                    if (!(monsterItem instanceof Potion)) {
                        for (Item characterItem : characterInventory) {
                            if (characterItem.getName().equals(monsterItem.getName())) {
                                exists = true;
                            }
                        }

                        if (!exists) {
                            if (monsterItem instanceof Armor) {
                                RPGSystem.getActiveCharacter().addItem(new Armor((Armor) monsterItem));
                                RPGSystem.updateWorldLog(
                                        RPGSystem.getActiveCharacter().getName()
                                        + " looted " + monsterItem.getName() + " from "
                                        + RPGSystem.getActiveMonster().getName()
                                        + "!");
                            } else {
                                RPGSystem.getActiveCharacter().addItem(new Weapon((Weapon) monsterItem));
                                RPGSystem.updateWorldLog(
                                        RPGSystem.getActiveCharacter().getName()
                                        + " looted " + monsterItem.getName() + " from "
                                        + RPGSystem.getActiveMonster().getName()
                                        + "!");
                            }
                        }
                    } else {
                        RPGSystem.getActiveCharacter().addItem(monsterItem);
                        RPGSystem.updateWorldLog(
                                RPGSystem.getActiveCharacter().getName()
                                + " looted " + monsterItem.getName() + " from "
                                + RPGSystem.getActiveMonster().getName()
                                + "!");
                    }
                }
                
                //victory message
                JOptionPane.showMessageDialog(null, "Congratulations, "
                        + RPGSystem.getActiveMonster().getName()
                        + " has been defeated!");
                
                //gain experience
                RPGSystem.getActiveCharacter().addExperiencePoints(
                        RPGSystem.getActiveMonster().getExperiencePoints());
                RPGSystem.updateWorldLog(
                        RPGSystem.getActiveCharacter().getName()
                        + " has gained "
                        + RPGSystem.getActiveMonster().getExperiencePoints()
                        + " experience points.");

                //clean up
                ((DungeonGUI) RPGSystem.getDungeonMenu()).refreshInformation();
                RPGSystem.getActiveMonster().resetStatus();
                RPGSystem.removeGUI(this);
                ((DungeonGUI) RPGSystem.getDungeonMenu()).setVisible(true);
                this.dispose();
            }

        }
    }//GEN-LAST:event_actionButtonActionPerformed

    private void itemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemButtonActionPerformed
        // TODO add your handling code here:
        if (itemList.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Select a Potion first!");
        } else {
            int selectedIndex = itemList.getSelectedIndex();
            Potion selectedPotion = (Potion) RPGSystem.getActiveCharacter()
                    .getUsableItems().get(selectedIndex);

            //drink the potion
            RPGSystem.getActiveCharacter().drinkPotion(selectedPotion);

//            RPGSystem.getActiveCharacter().updateStats(
//                    ((Potion) RPGSystem.getActiveCharacter().getUsableItems()
//                            .get(selectedIndex)).getRecoverAmount(),
//                    ((Potion) RPGSystem.getActiveCharacter().getUsableItems()
//                            .get(selectedIndex)).getType());
            //update items
            LinkedList<Item> items = RPGSystem.getActiveCharacter().getUsableItems();
            DefaultListModel itemModel = new DefaultListModel();
            for (Item item : items) {
                itemModel.addElement(item.getName());
            }
            itemList.setModel(itemModel);

            //update GUI
            healthLabel.setText(Integer.toString(
                    RPGSystem.getActiveCharacter().getHealthPoints())
                    + "/"
                    + Integer.toString(
                            RPGSystem.getActiveCharacter().getMaxHp()));

            healthBar.setValue(100
                    * RPGSystem.getActiveCharacter().getHealthPoints()
                    / RPGSystem.getActiveCharacter().getMaxHp());

            magicLabel.setText(Integer.toString(
                    RPGSystem.getActiveCharacter().getMagicPoints())
                    + "/"
                    + Integer.toString(
                            RPGSystem.getActiveCharacter().getMaxMp()));

            magicBar.setValue(100
                    * (RPGSystem.getActiveCharacter().getMagicPoints()
                    / RPGSystem.getActiveCharacter().getMaxMp()));

            //tell player what happened
            if (selectedPotion.getType().equals("hp")) {
                updateWorldTextArea(
                        RPGSystem.getActiveCharacter().getName()
                        + " has recovered "
                        + (RPGSystem.getActiveCharacter().getMaxHp()
                        / selectedPotion.getRecoverAmount())
                        + " health points by drinking "
                        + selectedPotion.getName() + ".\n"
                        + RPGSystem.getActiveMonster().getName()
                        + " takes advantage of the moment and attacks!\n");
            } else {
                updateWorldTextArea(
                        RPGSystem.getActiveCharacter().getName()
                        + " has recovered "
                        + (RPGSystem.getActiveCharacter().getMaxHp()
                        / selectedPotion.getRecoverAmount())
                        + " magic points by drinking "
                        + selectedPotion.getName() + ".\n"
                        + RPGSystem.getActiveMonster().getName()
                        + " takes advantage of the moment and attacks!\n");
            }

            //monster's turn
            if (RPGSystem.getActiveMonster().getHealthPoints() > 0) {
                int healthBefore = RPGSystem.getActiveCharacter().getHealthPoints();
                Character activeCharacter = RPGSystem.getActiveCharacter();
                Attack monstersAttack = RPGSystem.getActiveMonster().decideAttack();

                RPGSystem.performAction(monstersAttack, activeCharacter);

                //player loses
                if (RPGSystem.getActiveCharacter().getHealthPoints() < 1) {

                    //notify player how they died
                    JOptionPane.showMessageDialog(null,
                            RPGSystem.getActiveMonster().getName()
                            + " has slain you! :\"(");

                    //show game over menu
                    GameOverGUI gameOver = new GameOverGUI();
                    RPGSystem.addGUI(gameOver);
                    gameOver.setVisible(true);

                    //close dungeon menu
                    DungeonGUI dungeonMenu = (DungeonGUI) RPGSystem.getDungeonMenu();
                    RPGSystem.removeGUI(dungeonMenu);
                    dungeonMenu.dispose();
                    dungeonMenu = null;

                    //reset monster
                    RPGSystem.getActiveMonster().resetStatus();

                    //close combat menu
                    RPGSystem.removeGUI(this);
                    this.dispose();
                    return;
                }

                //player still alive, update text
                healthLabel.setText(Integer.toString(
                        RPGSystem.getActiveCharacter().getHealthPoints())
                        + "/"
                        + Integer.toString(
                                RPGSystem.getActiveCharacter().getMaxHp()));
                healthBar.setValue(100
                        * RPGSystem.getActiveCharacter().getHealthPoints()
                        / RPGSystem.getActiveCharacter().getMaxHp());

                //tell player what happened
                int healthAfter = RPGSystem.getActiveCharacter().getHealthPoints();
                int dmgDealt = healthBefore - healthAfter;

                updateWorldTextArea(RPGSystem.getActiveMonster().getName()
                        + " assaulted you with "
                        + monstersAttack.getAttackName()
                        + "!\n"
                        + RPGSystem.getActiveCharacter().getName() + " takes "
                        + dmgDealt + " damage and winces from the pain!\n"
                        + RPGSystem.getActiveMonster().getName()
                        + " waits eagerly for your next move.\n");
            }

//            updateWorldTextArea("You recover "
//                    + (Potion) RPGSystem.getActiveCharacter().getUsableItems().get(selectedIndex)
//                    + ((Potion) RPGSystem.getActiveCharacter().getUsableItems().get(selectedIndex)).getType() + ".");
//            RPGSystem.getActiveCharacter().getUsableItems().remove(selectedIndex);
        }
    }//GEN-LAST:event_itemButtonActionPerformed

    public void updateWorldTextArea(String message) {
        combatTextArea.append(message);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CombatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CombatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CombatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CombatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CombatGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionButton;
    private javax.swing.JList<String> attackList;
    private javax.swing.JTextArea combatTextArea;
    private javax.swing.JProgressBar healthBar;
    private javax.swing.JLabel healthLabel;
    private javax.swing.JButton itemButton;
    private javax.swing.JList<String> itemList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JProgressBar magicBar;
    private javax.swing.JLabel magicLabel;
    private javax.swing.JProgressBar monsterBar;
    private javax.swing.JLabel monsterHPLabel;
    private javax.swing.JLabel monsterNameLabel;
    private javax.swing.JLabel nameLabel;
    // End of variables declaration//GEN-END:variables
}
